{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","product","status","id","name","price","elements","age","map","user","index","key","className","href","a","this","showInfoProduct","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAwFeA,G,MArFf,8KAEkBC,GACd,GAAIA,EAAQC,OACV,OACE,oCACQD,EAAQE,GADhB,IACoB,6BADpB,UAEUF,EAAQG,KAFlB,IAEwB,6BAFxB,WAGWH,EAAQI,MAHnB,aAG8B,6BAH9B,YAIaJ,EAAQC,OAAS,SAAW,aATjD,+BAeI,IA4BII,EAlBQ,CACV,CACEH,GAAI,EACJC,KAAM,yBACNG,IAAK,IAEP,CACEJ,GAAI,EACJC,KAAM,uBACNG,IAAK,IAEP,CACEJ,GAAI,EACJC,KAAM,mBACNG,IAAK,KAIYC,KAAI,SAACC,EAAMC,GAC9B,OACE,yBAAKC,IAAKD,GACR,4BAAKD,EAAKL,MACV,2BAAIK,EAAKF,SAIf,OACE,6BACE,yBAAKK,UAAU,yBACb,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,SACA,wBAAID,UAAU,kBACZ,wBAAIA,UAAU,UACZ,uBAAGC,KAAK,KAAR,SAEF,4BACE,uBAAGA,KAAK,KAAR,YAKR,yBAAKD,UAAU,SACb,mCApDE,EAoDF,IACU,6BADV,OAnDE,EAmDF,IAEU,6BAFV,WAGWE,GAHX,IAGkB,8BAElB,sCAvDK,WA0DHC,KAAKC,gBAzDC,CACZb,GAAI,EACJC,KAAM,gBACNC,MAAO,KACPH,QAAQ,IAsDJ,6BACEI,QA7EZ,GAAyBW,cCSLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.41f28740.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport class App extends Component {\n\n  showInfoProduct(product){\n    if (product.status) {\n      return (\n        <h3>\n          ID : {product.id} <br />\n          Name : {product.name} <br />\n          Price : {product.price} VNĐ <br />\n          Status : { product.status ? 'Active' : 'Pending' }\n        </h3>\n      )\n    }\n  }\n  render() {\n    var a = 5;\n    var b = 7;\n    var name = 'trinhmn';\n    var product = {\n      id: 1,\n      name: 'Iphone 7 plus',\n      price: 15000000,\n      status: true,\n    };\n\n    var users = [\n      {\n        id: 1,\n        name: 'Nguyễn Văn A',\n        age: 18,\n      },\n      {\n        id: 2,\n        name: 'Trần Văn B',\n        age: 24,\n      },\n      {\n        id: 3,\n        name: 'Lý Thị C',\n        age: 30,\n      },\n    ];\n\n    var elements = users.map((user, index) => {\n      return (\n        <div key={index}>\n          <h2>{user.name}</h2>\n          <p>{user.age}</p>\n        </div>\n      )\n    })\n    return (\n      <div>\n        <nav className=\"navbar navbar-inverse\">\n          <div className=\"container-fluid\">\n            <a className=\"navbar-brand\" href=\"/\">Title</a>\n            <ul className=\"nav navbar-nav\">\n              <li className=\"active\">\n                <a href=\"/\">Home</a>\n              </li>\n              <li>\n                <a href=\"/\">Link</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <div className=\"ml-30\">\n          <h2>\n            a : {a} <br />\n            b : {b} <br />\n            a + b = {a + b} <br />\n          </h2>\n          <h3>\n            name : {name}\n          </h3>\n          { this.showInfoProduct(product) }\n          <hr />\n          { elements }\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}